name: CI - Build, Test, Push to GHCR, and Deploy via Terraform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: Password123!
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: >-
          --health-cmd "exit 0"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    env:
      GITHUB_ACTIONS: true
      ConnectionStrings__DefaultConnection: Server=localhost,1433;Database=RibbitReelsDb;User Id=sa;Password=Password123!;TrustServerCertificate=True
      Jwt__Key: ${{ secrets.JWT__KEY }}
      Jwt__Issuer: ${{ secrets.JWT__ISSUER }}
      Jwt__Audience: ${{ secrets.JWT__AUDIENCE }}
      Jwt__ExpireMinutes: ${{ secrets.JWT__EXPIREMINUTES }}
      GoogleAuth__ClientId: ${{ secrets.GOOGLEAUTH__CLIENTID }}
      GoogleAuth__ClientSecret: ${{ secrets.GOOGLEAUTH__CLIENTSECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore NuGet dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Wait for SQL Server to be ready
        run: |
          echo "⏳ Waiting for SQL Server to be ready..."
          for i in {1..30}; do
            /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P Password123! -Q "SELECT 1" && echo "✅ SQL Server is ready!" && break
            echo "Attempt $i: SQL Server not ready yet..."
            sleep 5
          done

      - name: Run Unit and Integration Tests (migrates DB internally)
        run: dotnet test --no-build --configuration Release
        env:
          DOTNET_ENVIRONMENT: Development

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Docker image tag
        run: echo "IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/ribbitreels-api:latest" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t $IMAGE_TAG -f RibbitReels.Api/Dockerfile .

      - name: Push Docker image to GHCR
        run: docker push $IMAGE_TAG

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Plan
        working-directory: ./infra
        run: terraform plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_jwt_key: ${{ secrets.JWT__KEY }}
          TF_VAR_jwt_issuer: ${{ secrets.JWT__ISSUER }}
          TF_VAR_jwt_audience: ${{ secrets.JWT__AUDIENCE }}
          TF_VAR_jwt_expireminutes: ${{ secrets.JWT__EXPIREMINUTES }}
          TF_VAR_google_clientid: ${{ secrets.GOOGLEAUTH__CLIENTID }}
          TF_VAR_google_clientsecret: ${{ secrets.GOOGLEAUTH__CLIENTSECRET }}

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_jwt_key: ${{ secrets.JWT__KEY }}
          TF_VAR_jwt_issuer: ${{ secrets.JWT__ISSUER }}
          TF_VAR_jwt_audience: ${{ secrets.JWT__AUDIENCE }}
          TF_VAR_jwt_expireminutes: ${{ secrets.JWT__EXPIREMINUTES }}
          TF_VAR_google_clientid: ${{ secrets.GOOGLEAUTH__CLIENTID }}
          TF_VAR_google_clientsecret: ${{ secrets.GOOGLEAUTH__CLIENTSECRET }}
